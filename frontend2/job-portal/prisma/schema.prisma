// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id           String @id @default(cuid())
  name         String  
  email        String  @unique
  password     String  
  role         Role    @default(USER)
  applicatons  Application[]
  profile      Resume?
  createdAt    DateTime  @default(now())
  jobs         Job[]       

  emailVerified DateTime?
  accounts       Account[]
  sessions       Session[]

}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role{
  ADMIN
  USER
}

model Job{
  id                  String    @id @default(cuid())
  title               String   
  description         String
  department          String
  location            String
  salary              String
  owner              User      @relation(fields: [ownerId], references: [id])
  ownerId            String
  isActive            Boolean  @default(true)
  customFields         Json
  jobType            JobType  @default(INTERN)
  requireResume        Boolean   @default(true)
  applications       Application[]
  createdAt        DateTime       @default(now())
}

model Application{
  id                String @id @default(cuid())
  user              User @relation(fields: [userId] , references: [id])
  userId            String
  job               Job   @relation(fields : [jobId] , references: [id])
  jobId             String
  answer            Json
  resumeUrl         String?
  status            ApplicationStatus  @default(PENDING)
  createdAt         DateTime @default(now())
  updated           DateTime  @updatedAt
  usedOnsiteResume  Boolean @default(false) 
  applicationLog    ApplicationLog[]
}

model Resume{
  id          String   @id @default(cuid())
  user         User   @relation(fields: [userId] , references: [id])
  userId       String   @unique
  content      Json   
  createdAt     DateTime    @default(now())
}

model ApplicationLog{
   id                 String @id @default(cuid())
   applicationId      String
  application         Application @relation(fields: [applicationId], references: [id])
  status              ApplicationStatus
  timestamp           DateTime @default(now())


}

enum ApplicationStatus{
    PENDING
    ACCEPTED
    REJECTED
    ON_HOLD
}


enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
  FREELANCE
}